---
import type { TableData } from "../types"
import { IMAGE_PATH } from "../../constants"
interface Props {
  data: TableData
  sort?: { [key: string]: "asc" | "desc" }
  showForms?: boolean
}

const { data, sort, showForms } = Astro.props

const cols = [
  { label: "#", sort: "id", type: "number" },
  { label: "Image" },
  { label: "Name", sort: "name" },
  { label: "Type", sort: "type" },
]
---

<table class="list">
  <thead>
    <tr>
      {
        cols.map((col) => {
          const colProps = {
            "data-sort": col.sort,
            "data-type": col.type,
            "data-dir": (sort && col.sort && sort[col.sort]) ?? undefined,
          }
          return <th {...colProps}>{col.label}</th>
        })
      }
    </tr>
  </thead>
  <tbody>
    {
      data.map((pokemon) => {
        const forms = showForms ? pokemon.forms : [pokemon.forms.find((f) => f.id === pokemon.defaultForm.id)]
        return forms.map((form) => {
          return form ? (
            <tr data-id={pokemon.id} data-formid={form.id} data-name={pokemon.name} data-form={pokemon.name}>
              <td data-sort="id" data-value={pokemon.id}>
                <strong class="pokemon-name">{pokemon.id}</strong>
                {/* {form.id !== pokemon.id && showForms === true && pokemon.forms.length > 1 && (
                  <span class="form-name">{form.id}</span>
                )} */}
              </td>
              <td>{form.image.normal && <img loading="lazy" src={`${IMAGE_PATH + form.image.normal}.png`} />}</td>
              <td data-sort="name" data-value={pokemon.name}>
                <span class="pokemon-name">{pokemon.name}</span>
                {form.name !== pokemon.defaultForm.name &&
                  form.name !== pokemon.name &&
                  (showForms === true || pokemon.forms.length > 1) && <span class="form-name">{form.name}</span>}
              </td>
              <td data-sort="type">
                <ul class="types">
                  {form.type.map((t) => (
                    <li>
                      <figure data-type={t.toLowerCase()} />
                      <span>{t}</span>
                    </li>
                  ))}
                </ul>
              </td>
            </tr>
          ) : null
        })
      })
    }
  </tbody>
</table>

<dialog closedby="any" class="lightbox">
  <button autofocus class="close" data-action="close">
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M16 16L12 12M12 12L8 8M12 12L16 8M12 12L8 16" stroke-width="2"></path>
    </svg>
  </button>
  <div class="lightbox-container">
    <header></header>
    <picture></picture>
    <nav>
      <button data-action="prev">&larr;</button>
      <button data-action="next">&rarr;</button>
    </nav>
  </div>
</dialog>
<script>
  import type { Pokemon, PokemonType, Species } from "../types"
  import { COLORS } from "../../constants"

  const html = String.raw

  const dialog = document.querySelector("dialog.lightbox")! satisfies HTMLDialogElement
  const table = document.querySelector("table.list")! satisfies HTMLElement
  const header = dialog.querySelector("header")! satisfies HTMLElement
  const picture = dialog.querySelector("picture")! satisfies HTMLElement

  const state: {
    data: Species[]
    id: number
    formid: number
  } = {
    data: (await getData()) ?? [],
    id: 0,
    formid: 0,
  }

  attach()

  function attach() {
    table.addEventListener("click", async (event) => {
      if (event.target instanceof HTMLElement) {
        if (event.target.nodeName === "TD") {
          const { id, formid, name } = event.target.parentElement!.dataset
          if (id && formid && name) {
            state.id = +id
            state.formid = +formid
            const src = event.target.parentNode!.querySelector("img")!.src
            await updateDialog(state.id, state.formid, name, src)
            dialog.showModal()
          }
        } else if (event.target.nodeName === "TH") {
          const { sort, type } = event.target.dataset
          if (sort) {
            sortRows(sort, type, event.target)
          }
        }
      }
    })

    dialog.addEventListener("keydown", async (event) => {
      const action = event.key === "ArrowRight" ? "next" : event.key === "ArrowLeft" ? "prev" : false

      if (action) {
        const button = dialog.querySelector(`button[data-action=${action}]`)! satisfies HTMLElement
        button.style.animation = "press 0.2s ease-out forwards"
        button.focus()
        await getSibling(action)
      }
    })

    dialog.addEventListener("keyup", (event) => {
      const action = event.key === "ArrowRight" ? "next" : event.key === "ArrowLeft" ? "prev" : false
      if (action) {
        const button = dialog.querySelector(`button[data-action=${action}]`)! satisfies HTMLElement
        button.style.animation = "press 0.2s ease-out reverse"
      }
    })

    dialog.addEventListener("click", async (event) => {
      if (event.target instanceof HTMLElement) {
        if (event.target.nodeName === "BUTTON") {
          const { action } = event.target.dataset
          console.log(action)
          if (action === "close") {
            dialog.close()
          } else {
            action && (await getSibling(action))
          }
        }
      }
    })
  }

  async function getKeys(): Promise<{ remoteKey: string; localKey: string; isStale: boolean }> {
    const remoteKey = await fetch("/meta.json")
      .then((b) => b.json())
      .then((d) => d.key)

    const localKey = String(localStorage.getItem("astrodex.key"))

    return { remoteKey, localKey, isStale: remoteKey !== localKey }
  }

  async function getData(): Promise<Species[] | null> {
    const { remoteKey, isStale } = await getKeys()

    if (isStale || !localStorage.hasOwnProperty("astrodex.data")) {
      console.log("loading fresh data")
      const data = await fetch("/data/data.json", { cache: "no-cache" }).then(async (b) => {
        const d = await b.text()
        localStorage.setItem("astrodex.data", d)
        localStorage.setItem("astrodex.key", remoteKey)
        return d
      })
      return JSON.parse(data)
    } else {
      console.log("using cached data")
      return JSON.parse(localStorage.getItem("astrodex.data") ?? "")
    }
  }

  async function getSibling(action: string): Promise<void> {
    const node = document.querySelector(`tr[data-formid="${state.formid}"]`)!
    let target = action === "prev" ? node.previousElementSibling : node.nextElementSibling

    if (target instanceof HTMLElement && target.nodeName === "TR") {
      const { id, formid, name } = target.dataset
      const src = target.querySelector("img")!.src

      if (id && name && formid) {
        state.formid = +formid
        state.id = +id
        await updateDialog(state.id, state.formid, name, src)
      }
    }
  }

  function getDetails(
    id: number,
    formid: number
  ): { species: Species | undefined; form: Pokemon | undefined; defaultForm: Pokemon | undefined } {
    const species = state.data.find((p) => p.id === id)
    const form = species && species.family.flatMap((f) => f.forms).find((form) => form.id === formid)
    const defaultForm = species?.family.find((f) => f.isDefault)?.forms.find((f) => f.isDefault)

    return { species, form, defaultForm }
  }

  async function updateDialog(id: number, formid: number, name: string, src: string): Promise<void> {
    const { species, form, defaultForm } = getDetails(id, formid)

    if (species && form && defaultForm) {
      dialog.dataset.type = form.type[0]
      const [ta, tb] = form.type as [PokemonType, PokemonType] // TODO use PokemonType throughout
      const [ca, cb] = [COLORS[ta], COLORS[tb ?? ta]]

      dialog.style = `--cb: ${cb}; --ca: ${ca}`
      header.innerHTML = `<h2><span>${name}</span><span>#${id}</span></h2>`
      header.innerHTML += html`<div class="stats">
        <span class="form-name">${form.genus} Pok√©mon</span>${form.name !== species.name &&
        form.name !== defaultForm.name
          ? `<span class="form-name align-right">${form.name}</span></div>`
          : ""}
      </div>`

      picture.innerHTML = `<img src="${src}" />`
    }
  }

  function sortRows(col: string, type: string | undefined, node: HTMLElement): void {
    const dir = node.dataset.dir
    const newDir = !dir || dir === "desc" ? "asc" : "desc"
    const rows = table.querySelectorAll(":scope tbody tr")

    Array.from(rows)
      .sort((a, b) => {
        const [ea, eb] = dir === "asc" ? [a, b] : [b, a]
        const [ta, tb] = [ea.querySelector(`[data-sort="${col}"]`)!, eb.querySelector(`[data-sort="${col}"]`)!]
        const [ca, cb] = [
          ta?.getAttribute("data-value") ?? ta.textContent,
          tb?.getAttribute("data-value") ?? tb.textContent,
        ]

        return type === "number" ? (Number(ca) > Number(cb) ? -1 : 1) : cb.localeCompare(ca)
      })
      .forEach((tr) => table.querySelector("tbody")!.appendChild(tr))

    table
      .querySelectorAll("thead th")
      .forEach((th) => (th === node ? th.setAttribute("data-dir", newDir) : th.removeAttribute("data-dir")))
  }
</script>
