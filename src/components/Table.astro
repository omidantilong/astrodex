---
import type { Pokemon } from "../types"

interface Props {
  data: Pokemon[]
  sort?: { [key: string]: "asc" | "desc" }
}

const { data, sort } = Astro.props

const cols = [
  { label: "#", sort: "id", type: "number" },
  { label: "Image" },
  { label: "Name", sort: "name" },
  { label: "Type", sort: "type" },
]
---

<table class="list">
  <thead>
    <tr>
      {
        cols.map((col) => {
          const colProps = {
            "data-sort": col.sort,
            "data-type": col.type,
            "data-dir": (sort && col.sort && sort[col.sort]) ?? undefined,
          }
          return <th {...colProps}>{col.label}</th>
        })
      }
    </tr>
  </thead>
  <tbody>
    {
      data.map((pokemon) => {
        return (
          <tr data-id={pokemon.id} data-name={pokemon.name}>
            <td data-sort="id">{pokemon.id}</td>
            <td>
              <img loading="lazy" src={pokemon.image.normal} />
            </td>
            <td data-sort="name">{pokemon.name}</td>
            <td data-sort="type">
              <ul class="types">
                {pokemon.type.map((t) => (
                  <li>
                    <span data-type={t.toLowerCase()} />
                    {t}
                  </li>
                ))}
              </ul>
            </td>
          </tr>
        )
      })
    }
  </tbody>
</table>

<dialog closedby="any" class="lightbox"></dialog>

<script>
  const dialog = document.querySelector("dialog.lightbox")! satisfies HTMLDialogElement
  const table = document.querySelector("table.list")! satisfies HTMLElement

  const html = String.raw

  table.addEventListener("click", (event) => {
    if (event.target instanceof HTMLElement) {
      if (event.target.nodeName === "TD") {
        const data = event.target.parentElement!.dataset

        const { id, name } = data

        dialog.innerHTML = html`<header>
            <h2>${name}</h2>
            <span>#${id}</span>
          </header>
          <figure>
            <img
              src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png"
            />
          </figure>`

        dialog.showModal()
      } else if (event.target.nodeName === "TH") {
        const { sort, type } = event.target.dataset
        if (sort) {
          sortRows(sort, type, event.target)
        }
      }
    }
  })

  function sortRows(col: string, type: string | undefined, node: HTMLElement) {
    const dir = node.dataset.dir
    const newDir = !dir || dir === "desc" ? "asc" : "desc"

    Array.from(table.querySelectorAll("tbody tr"))
      .sort((a, b) => {
        const [ea, eb] = dir === "asc" ? [a, b] : [b, a]
        const [ca, cb] = [
          ea.querySelector(`[data-sort="${col}"]`)!.textContent,
          eb.querySelector(`[data-sort="${col}"]`)!.textContent,
        ]

        return type === "number" ? (Number(ca) > Number(cb) ? -1 : 1) : cb.localeCompare(ca)
      })
      .forEach((tr) => table.querySelector("tbody")!.appendChild(tr))

    table
      .querySelectorAll("thead th")
      .forEach((th) => (th === node ? th.setAttribute("data-dir", newDir) : th.removeAttribute("data-dir")))
  }
</script>
